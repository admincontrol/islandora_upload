<?php
/**
 * @file
 * Install and uninstall functions for the islandora_upload module.
 *
 */

/**
 * Implementation of Schema
 */
function islandora_upload_schema() {

  /**
  * node_fedora_objects Table
  * Used to join Fedora Objects with Nodes using PID and the NID
  */
  $schema['node_fedora_objects'] = array(
    'description' => 'Stores Fedora Objects link of defined {node}.',
    'fields' => array(
      'nid' => array(
        'description' => 'The Node ID.',
        'type' => 'int',
        'unsigned' => TRUE,
        'length' => 11,
        'not null' => TRUE,
      ),
      'pid' => array(
        'description' => 'The PID of Fedora Objects attached to NID.',
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
      ),
      'ownerid' => array(
        'description' => 'The UID that created the node/object.',
        'type' => 'int',
        'unsigned' => TRUE,
        'length' => 11,
        'not null' => TRUE,
      ),
      'fid' => array(
        'description' => 'The File ID.',
        'type' => 'int',
        'unsigned' => TRUE,
        'length' => 11,
        'not null' => TRUE,
      ),
    ),
  );
  /**
  * islandora_attachment_permissions Table
  * Used to set permissions on a per file bases
  * can be public, private, group, or by user.
  */
  $schema['islandora_attachment_permissions'] = array(
    'description' => 'Stores Access permissions for each Fedora Object.',
    'fields' => array(
      'iapid' => array(
        'description' => 'The table autoincrement ID.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'length' => 11,
        'not null' => TRUE,
      ),
      'public_permission' => array(
        'description' => 'Boolean representation of if the permission is set to public or not using 0 or 1.',
        'type' => 'int',
        'unsigned' => TRUE,
        'length' => 1,
        'not null' => TRUE,
        'default' => 1,
      ),
      'private_permission' => array(
        'description' => 'Boolean representation of if the permission is set to private or not using 0 or 1.',
        'type' => 'int',
        'unsigned' => TRUE,
        'length' => 1,
        'not null' => TRUE,
        'default' => 0,
      ),
      'pid' => array(
        'description' => 'The PID of Fedora Objects that the permissions are for.',
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('iapid'),
  );
  /**
  * islandora_attachment_permission_users Table
  * If Permission base on file is by user this table
  * stores the {islandora_attachment_permissions} ID (iapid)
  * and the User ID that can access it, if there are multiple users
  * there will be multiple table entries.  Example iapid = 1
  * permission for uid = 1 and uid = 5 there are then two records created
  * ubid: 1 - uid: 1 AND  ubid: 1 - uid: 5.
  * ubid = User Binding ID
  */
  $schema['islandora_attachment_permission_users'] = array(
    'description' => 'If permission is drupal user based this table is used to store users that can access objects linked to {islandora_attachment_permissions} by ID.',
    'fields' => array(
      'ubid' => array(
        'description' => 'The ubid is the {islandora_attachment_permissions} ID (iapid).',
        'type' => 'int',
        'unsigned' => TRUE,
        'length' => 11,
        'not null' => TRUE,
      ),
      'uid' => array(
        'description' => 'A UID that has access permission.',
        'type' => 'int',
        'unsigned' => TRUE,
        'length' => 11,
        'not null' => TRUE,
      ),
    ),
  );
  /**
  * islandora_attachment_permission_groups Table
  * If Permission base on file is by group this table
  * stores the {islandora_attachment_permissions} ID (iapid)
  * and the Group ID that can access it, if there are multiple groups
  * there will be multiple table entries.  Example iapid = 1
  * permission for gid = 15 and gid = 7 there are then two records created
  * ubid: 1 - gid: 7 AND  ubid: 1 - gid: 15.
  * Note: rid = Role ID
  * rbid = Role Binding ID
  */
  $schema['islandora_attachment_permission_roles'] = array(
    'description' => 'If permission is drupal group based this table is used to store groups that can access objects.',
    'fields' => array(
      'rbid' => array(
        'description' => 'The rbid is the {islandora_attachment_permissions} ID (iapid).',
        'type' => 'int',
        'unsigned' => TRUE,
        'length' => 11,
        'not null' => TRUE,
      ),
      'rid' => array(
        'description' => 'The Role ID that has access permission.',
        'type' => 'int',
        'unsigned' => TRUE,
        'length' => 11,
        'not null' => TRUE,
      ),
    ),
  );
  return $schema;
}
/*
 * Installing content model
 */
function generic_content_model() {
  // add content model
  module_load_include('inc', 'fedora_repository', 'api/fedora_item');
  module_load_include('inc', 'fedora_repository', 'api/dublin_core');
  module_load_include('inc', 'fedora_repository', 'api/fedora_utils');
  define("FEDORA_MODEL_URI", 'info:fedora/fedora-system:def/model#');
  try {
    $temp_item=new Fedora_Item('islandora:generic_CM');
    if (!$temp_item->exists()) {
      $new_item = Fedora_Item::ingest_new_item('islandora:generic_CM', 'A', 'Generic Content Model');
      $new_item->add_relationship('hasModel', 'fedora-system:ContentModel-3.0', FEDORA_MODEL_URI);
      $new_item->add_datastream_from_file(drupal_get_path('module', 'islandora_upload') . '/xml/GENERIC_CMODEL.xml', 'ISLANDORACM', 'Islandora Content Model.xml', 'application/xml', 'X');
    }
  }
  catch (exception $e) {
    drupal_set_message(check_plain('Content Model error' . $e), 'status');
  }
}

/**
 * Create the Generic Collection
 */
function generic_collection() {
  module_load_include('inc', 'fedora_repository', 'api/fedora_item');
  module_load_include('inc', 'fedora_repository', 'api/dublin_core');
  module_load_include('inc', 'fedora_repository', 'api/fedora_utils');
  define("FEDORA_MODEL_URI", 'info:fedora/fedora-system:def/model#');
  try {
    $temp_item=new Fedora_Item('islandora:Generic_Collection');
    if (!$temp_item->exists()) {
      $new_item = fedora_item::ingest_new_item('islandora:Generic_Collection', 'A', 'Islandora Generic Upload Collection');
      $new_item->add_relationship('hasModel', 'islandora:generic_CM', FEDORA_MODEL_URI);
      $new_item->add_relationship('isMemberOfCollection', 'islandora:root');
      $new_item->add_datastream_from_file(drupal_get_path('module', 'islandora_upload') . '/xml/GENERIC-COLLECTION_POLICY.xml', 'COLLECTION_POLICY', 'Collection Policy', 'text/xml', 'X');
      $new_item->add_datastream_from_file(drupal_get_path('module', 'islandora_upload') . '/images/Crystal_Clear_filesystem_folder_grey.png', 'TN', 'Thumbnail.png', 'image/png', 'M');
    }
  }
  catch (exception $e) {
    drupal_set_message(check_plain('Collection error'. $e), 'status');
  }
}

/**
 * Implementation of hook_install().
 */
function islandora_upload_install() {
  // Create table
  drupal_install_schema('islandora_upload');
  // create the generic content model if it doesnt exist
  generic_content_model();
  // create the generic collection if it doenst exist
  generic_collection();
}

/**
 * Implementation of hook_uninstall().
 */
function islandora_upload_uninstall() {
  //Drop Tables
  drupal_uninstall_schema('islandora_upload');
}
